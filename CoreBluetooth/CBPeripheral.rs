//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreBluetooth::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSInteger)]
    pub enum CBPeripheralState {
        CBPeripheralStateDisconnected = 0,
        CBPeripheralStateConnecting = 1,
        CBPeripheralStateConnected = 2,
        CBPeripheralStateDisconnecting = 3,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum CBCharacteristicWriteType {
        CBCharacteristicWriteWithResponse = 0,
        CBCharacteristicWriteWithoutResponse = 1,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CoreBluetooth_CBPeripheral")]
    pub struct CBPeripheral;

    #[cfg(feature = "CoreBluetooth_CBPeripheral")]
    unsafe impl ClassType for CBPeripheral {
        #[inherits(NSObject)]
        type Super = CBPeer;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "CoreBluetooth_CBPeripheral")]
unsafe impl NSCopying for CBPeripheral {}

#[cfg(feature = "CoreBluetooth_CBPeripheral")]
unsafe impl NSObjectProtocol for CBPeripheral {}

extern_methods!(
    #[cfg(feature = "CoreBluetooth_CBPeripheral")]
    unsafe impl CBPeripheral {
        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn CBPeripheralDelegate>>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn CBPeripheralDelegate>>,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other name)]
        pub unsafe fn name(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSNumber")]
        #[deprecated]
        #[method_id(@__retain_semantics Other RSSI)]
        pub unsafe fn RSSI(&self) -> Option<Id<NSNumber>>;

        #[method(state)]
        pub unsafe fn state(&self) -> CBPeripheralState;

        #[cfg(all(feature = "CoreBluetooth_CBService", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other services)]
        pub unsafe fn services(&self) -> Option<Id<NSArray<CBService>>>;

        #[method(canSendWriteWithoutResponse)]
        pub unsafe fn canSendWriteWithoutResponse(&self) -> bool;

        #[method(ancsAuthorized)]
        pub unsafe fn ancsAuthorized(&self) -> bool;

        #[method(readRSSI)]
        pub unsafe fn readRSSI(&self);

        #[cfg(all(feature = "CoreBluetooth_CBUUID", feature = "Foundation_NSArray"))]
        #[method(discoverServices:)]
        pub unsafe fn discoverServices(&self, service_uui_ds: Option<&NSArray<CBUUID>>);

        #[cfg(all(
            feature = "CoreBluetooth_CBService",
            feature = "CoreBluetooth_CBUUID",
            feature = "Foundation_NSArray"
        ))]
        #[method(discoverIncludedServices:forService:)]
        pub unsafe fn discoverIncludedServices_forService(
            &self,
            included_service_uui_ds: Option<&NSArray<CBUUID>>,
            service: &CBService,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBService",
            feature = "CoreBluetooth_CBUUID",
            feature = "Foundation_NSArray"
        ))]
        #[method(discoverCharacteristics:forService:)]
        pub unsafe fn discoverCharacteristics_forService(
            &self,
            characteristic_uui_ds: Option<&NSArray<CBUUID>>,
            service: &CBService,
        );

        #[cfg(feature = "CoreBluetooth_CBCharacteristic")]
        #[method(readValueForCharacteristic:)]
        pub unsafe fn readValueForCharacteristic(&self, characteristic: &CBCharacteristic);

        #[method(maximumWriteValueLengthForType:)]
        pub unsafe fn maximumWriteValueLengthForType(
            &self,
            r#type: CBCharacteristicWriteType,
        ) -> NSUInteger;

        #[cfg(all(
            feature = "CoreBluetooth_CBCharacteristic",
            feature = "Foundation_NSData"
        ))]
        #[method(writeValue:forCharacteristic:type:)]
        pub unsafe fn writeValue_forCharacteristic_type(
            &self,
            data: &NSData,
            characteristic: &CBCharacteristic,
            r#type: CBCharacteristicWriteType,
        );

        #[cfg(feature = "CoreBluetooth_CBCharacteristic")]
        #[method(setNotifyValue:forCharacteristic:)]
        pub unsafe fn setNotifyValue_forCharacteristic(
            &self,
            enabled: bool,
            characteristic: &CBCharacteristic,
        );

        #[cfg(feature = "CoreBluetooth_CBCharacteristic")]
        #[method(discoverDescriptorsForCharacteristic:)]
        pub unsafe fn discoverDescriptorsForCharacteristic(
            &self,
            characteristic: &CBCharacteristic,
        );

        #[cfg(feature = "CoreBluetooth_CBDescriptor")]
        #[method(readValueForDescriptor:)]
        pub unsafe fn readValueForDescriptor(&self, descriptor: &CBDescriptor);

        #[cfg(all(feature = "CoreBluetooth_CBDescriptor", feature = "Foundation_NSData"))]
        #[method(writeValue:forDescriptor:)]
        pub unsafe fn writeValue_forDescriptor(&self, data: &NSData, descriptor: &CBDescriptor);

        #[method(openL2CAPChannel:)]
        pub unsafe fn openL2CAPChannel(&self, psm: CBL2CAPPSM);
    }
);

extern_methods!(
    /// Methods declared on superclass `CBPeer`
    #[cfg(feature = "CoreBluetooth_CBPeripheral")]
    unsafe impl CBPeripheral {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "CoreBluetooth_CBPeripheral")]
    unsafe impl CBPeripheral {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);

extern_protocol!(
    pub unsafe trait CBPeripheralDelegate: NSObjectProtocol {
        #[cfg(feature = "CoreBluetooth_CBPeripheral")]
        #[optional]
        #[method(peripheralDidUpdateName:)]
        unsafe fn peripheralDidUpdateName(&self, peripheral: &CBPeripheral);

        #[cfg(all(
            feature = "CoreBluetooth_CBPeripheral",
            feature = "CoreBluetooth_CBService",
            feature = "Foundation_NSArray"
        ))]
        #[optional]
        #[method(peripheral:didModifyServices:)]
        unsafe fn peripheral_didModifyServices(
            &self,
            peripheral: &CBPeripheral,
            invalidated_services: &NSArray<CBService>,
        );

        #[cfg(all(feature = "CoreBluetooth_CBPeripheral", feature = "Foundation_NSError"))]
        #[deprecated]
        #[optional]
        #[method(peripheralDidUpdateRSSI:error:)]
        unsafe fn peripheralDidUpdateRSSI_error(
            &self,
            peripheral: &CBPeripheral,
            error: Option<&NSError>,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBPeripheral",
            feature = "Foundation_NSError",
            feature = "Foundation_NSNumber"
        ))]
        #[optional]
        #[method(peripheral:didReadRSSI:error:)]
        unsafe fn peripheral_didReadRSSI_error(
            &self,
            peripheral: &CBPeripheral,
            rssi: &NSNumber,
            error: Option<&NSError>,
        );

        #[cfg(all(feature = "CoreBluetooth_CBPeripheral", feature = "Foundation_NSError"))]
        #[optional]
        #[method(peripheral:didDiscoverServices:)]
        unsafe fn peripheral_didDiscoverServices(
            &self,
            peripheral: &CBPeripheral,
            error: Option<&NSError>,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBPeripheral",
            feature = "CoreBluetooth_CBService",
            feature = "Foundation_NSError"
        ))]
        #[optional]
        #[method(peripheral:didDiscoverIncludedServicesForService:error:)]
        unsafe fn peripheral_didDiscoverIncludedServicesForService_error(
            &self,
            peripheral: &CBPeripheral,
            service: &CBService,
            error: Option<&NSError>,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBPeripheral",
            feature = "CoreBluetooth_CBService",
            feature = "Foundation_NSError"
        ))]
        #[optional]
        #[method(peripheral:didDiscoverCharacteristicsForService:error:)]
        unsafe fn peripheral_didDiscoverCharacteristicsForService_error(
            &self,
            peripheral: &CBPeripheral,
            service: &CBService,
            error: Option<&NSError>,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBCharacteristic",
            feature = "CoreBluetooth_CBPeripheral",
            feature = "Foundation_NSError"
        ))]
        #[optional]
        #[method(peripheral:didUpdateValueForCharacteristic:error:)]
        unsafe fn peripheral_didUpdateValueForCharacteristic_error(
            &self,
            peripheral: &CBPeripheral,
            characteristic: &CBCharacteristic,
            error: Option<&NSError>,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBCharacteristic",
            feature = "CoreBluetooth_CBPeripheral",
            feature = "Foundation_NSError"
        ))]
        #[optional]
        #[method(peripheral:didWriteValueForCharacteristic:error:)]
        unsafe fn peripheral_didWriteValueForCharacteristic_error(
            &self,
            peripheral: &CBPeripheral,
            characteristic: &CBCharacteristic,
            error: Option<&NSError>,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBCharacteristic",
            feature = "CoreBluetooth_CBPeripheral",
            feature = "Foundation_NSError"
        ))]
        #[optional]
        #[method(peripheral:didUpdateNotificationStateForCharacteristic:error:)]
        unsafe fn peripheral_didUpdateNotificationStateForCharacteristic_error(
            &self,
            peripheral: &CBPeripheral,
            characteristic: &CBCharacteristic,
            error: Option<&NSError>,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBCharacteristic",
            feature = "CoreBluetooth_CBPeripheral",
            feature = "Foundation_NSError"
        ))]
        #[optional]
        #[method(peripheral:didDiscoverDescriptorsForCharacteristic:error:)]
        unsafe fn peripheral_didDiscoverDescriptorsForCharacteristic_error(
            &self,
            peripheral: &CBPeripheral,
            characteristic: &CBCharacteristic,
            error: Option<&NSError>,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBDescriptor",
            feature = "CoreBluetooth_CBPeripheral",
            feature = "Foundation_NSError"
        ))]
        #[optional]
        #[method(peripheral:didUpdateValueForDescriptor:error:)]
        unsafe fn peripheral_didUpdateValueForDescriptor_error(
            &self,
            peripheral: &CBPeripheral,
            descriptor: &CBDescriptor,
            error: Option<&NSError>,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBDescriptor",
            feature = "CoreBluetooth_CBPeripheral",
            feature = "Foundation_NSError"
        ))]
        #[optional]
        #[method(peripheral:didWriteValueForDescriptor:error:)]
        unsafe fn peripheral_didWriteValueForDescriptor_error(
            &self,
            peripheral: &CBPeripheral,
            descriptor: &CBDescriptor,
            error: Option<&NSError>,
        );

        #[cfg(feature = "CoreBluetooth_CBPeripheral")]
        #[optional]
        #[method(peripheralIsReadyToSendWriteWithoutResponse:)]
        unsafe fn peripheralIsReadyToSendWriteWithoutResponse(&self, peripheral: &CBPeripheral);

        #[cfg(all(
            feature = "CoreBluetooth_CBL2CAPChannel",
            feature = "CoreBluetooth_CBPeripheral",
            feature = "Foundation_NSError"
        ))]
        #[optional]
        #[method(peripheral:didOpenL2CAPChannel:error:)]
        unsafe fn peripheral_didOpenL2CAPChannel_error(
            &self,
            peripheral: &CBPeripheral,
            channel: Option<&CBL2CAPChannel>,
            error: Option<&NSError>,
        );
    }

    unsafe impl ProtocolType for dyn CBPeripheralDelegate {}
);
