//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreBluetooth::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSInteger)]
    #[deprecated = "Use CBManagerState instead"]
    pub enum CBCentralManagerState {
        #[deprecated = "Use CBManagerState instead"]
        CBCentralManagerStateUnknown = CBManagerStateUnknown,
        #[deprecated = "Use CBManagerState instead"]
        CBCentralManagerStateResetting = CBManagerStateResetting,
        #[deprecated = "Use CBManagerState instead"]
        CBCentralManagerStateUnsupported = CBManagerStateUnsupported,
        #[deprecated = "Use CBManagerState instead"]
        CBCentralManagerStateUnauthorized = CBManagerStateUnauthorized,
        #[deprecated = "Use CBManagerState instead"]
        CBCentralManagerStatePoweredOff = CBManagerStatePoweredOff,
        #[deprecated = "Use CBManagerState instead"]
        CBCentralManagerStatePoweredOn = CBManagerStatePoweredOn,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum CBConnectionEvent {
        CBConnectionEventPeerDisconnected = 0,
        CBConnectionEventPeerConnected = 1,
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum CBCentralManagerFeature {
        CBCentralManagerFeatureExtendedScanAndConnect = 1 << 0,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CoreBluetooth_CBCentralManager")]
    pub struct CBCentralManager;

    #[cfg(feature = "CoreBluetooth_CBCentralManager")]
    unsafe impl ClassType for CBCentralManager {
        #[inherits(NSObject)]
        type Super = CBManager;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "CoreBluetooth_CBCentralManager")]
unsafe impl NSObjectProtocol for CBCentralManager {}

extern_methods!(
    #[cfg(feature = "CoreBluetooth_CBCentralManager")]
    unsafe impl CBCentralManager {
        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn CBCentralManagerDelegate>>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn CBCentralManagerDelegate>>,
        );

        #[method(isScanning)]
        pub unsafe fn isScanning(&self) -> bool;

        #[method(supportsFeatures:)]
        pub unsafe fn supportsFeatures(features: CBCentralManagerFeature) -> bool;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;

        #[cfg(all(
            feature = "CoreBluetooth_CBPeripheral",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSUUID"
        ))]
        #[method_id(@__retain_semantics Other retrievePeripheralsWithIdentifiers:)]
        pub unsafe fn retrievePeripheralsWithIdentifiers(
            &self,
            identifiers: &NSArray<NSUUID>,
        ) -> Id<NSArray<CBPeripheral>>;

        #[cfg(all(
            feature = "CoreBluetooth_CBPeripheral",
            feature = "CoreBluetooth_CBUUID",
            feature = "Foundation_NSArray"
        ))]
        #[method_id(@__retain_semantics Other retrieveConnectedPeripheralsWithServices:)]
        pub unsafe fn retrieveConnectedPeripheralsWithServices(
            &self,
            service_uui_ds: &NSArray<CBUUID>,
        ) -> Id<NSArray<CBPeripheral>>;

        #[cfg(all(
            feature = "CoreBluetooth_CBUUID",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method(scanForPeripheralsWithServices:options:)]
        pub unsafe fn scanForPeripheralsWithServices_options(
            &self,
            service_uui_ds: Option<&NSArray<CBUUID>>,
            options: Option<&NSDictionary<NSString, AnyObject>>,
        );

        #[method(stopScan)]
        pub unsafe fn stopScan(&self);

        #[cfg(all(
            feature = "CoreBluetooth_CBPeripheral",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method(connectPeripheral:options:)]
        pub unsafe fn connectPeripheral_options(
            &self,
            peripheral: &CBPeripheral,
            options: Option<&NSDictionary<NSString, AnyObject>>,
        );

        #[cfg(feature = "CoreBluetooth_CBPeripheral")]
        #[method(cancelPeripheralConnection:)]
        pub unsafe fn cancelPeripheralConnection(&self, peripheral: &CBPeripheral);

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method(registerForConnectionEventsWithOptions:)]
        pub unsafe fn registerForConnectionEventsWithOptions(
            &self,
            options: Option<&NSDictionary<CBConnectionEventMatchingOption, AnyObject>>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "CoreBluetooth_CBCentralManager")]
    unsafe impl CBCentralManager {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);

extern_protocol!(
    pub unsafe trait CBCentralManagerDelegate: NSObjectProtocol {
        #[cfg(feature = "CoreBluetooth_CBCentralManager")]
        #[method(centralManagerDidUpdateState:)]
        unsafe fn centralManagerDidUpdateState(&self, central: &CBCentralManager);

        #[cfg(all(
            feature = "CoreBluetooth_CBCentralManager",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[optional]
        #[method(centralManager:willRestoreState:)]
        unsafe fn centralManager_willRestoreState(
            &self,
            central: &CBCentralManager,
            dict: &NSDictionary<NSString, AnyObject>,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBCentralManager",
            feature = "CoreBluetooth_CBPeripheral",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSNumber",
            feature = "Foundation_NSString"
        ))]
        #[optional]
        #[method(centralManager:didDiscoverPeripheral:advertisementData:RSSI:)]
        unsafe fn centralManager_didDiscoverPeripheral_advertisementData_RSSI(
            &self,
            central: &CBCentralManager,
            peripheral: &CBPeripheral,
            advertisement_data: &NSDictionary<NSString, AnyObject>,
            rssi: &NSNumber,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBCentralManager",
            feature = "CoreBluetooth_CBPeripheral"
        ))]
        #[optional]
        #[method(centralManager:didConnectPeripheral:)]
        unsafe fn centralManager_didConnectPeripheral(
            &self,
            central: &CBCentralManager,
            peripheral: &CBPeripheral,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBCentralManager",
            feature = "CoreBluetooth_CBPeripheral",
            feature = "Foundation_NSError"
        ))]
        #[optional]
        #[method(centralManager:didFailToConnectPeripheral:error:)]
        unsafe fn centralManager_didFailToConnectPeripheral_error(
            &self,
            central: &CBCentralManager,
            peripheral: &CBPeripheral,
            error: Option<&NSError>,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBCentralManager",
            feature = "CoreBluetooth_CBPeripheral",
            feature = "Foundation_NSError"
        ))]
        #[optional]
        #[method(centralManager:didDisconnectPeripheral:error:)]
        unsafe fn centralManager_didDisconnectPeripheral_error(
            &self,
            central: &CBCentralManager,
            peripheral: &CBPeripheral,
            error: Option<&NSError>,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBCentralManager",
            feature = "CoreBluetooth_CBPeripheral"
        ))]
        #[optional]
        #[method(centralManager:connectionEventDidOccur:forPeripheral:)]
        unsafe fn centralManager_connectionEventDidOccur_forPeripheral(
            &self,
            central: &CBCentralManager,
            event: CBConnectionEvent,
            peripheral: &CBPeripheral,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBCentralManager",
            feature = "CoreBluetooth_CBPeripheral"
        ))]
        #[optional]
        #[method(centralManager:didUpdateANCSAuthorizationForPeripheral:)]
        unsafe fn centralManager_didUpdateANCSAuthorizationForPeripheral(
            &self,
            central: &CBCentralManager,
            peripheral: &CBPeripheral,
        );
    }

    unsafe impl ProtocolType for dyn CBCentralManagerDelegate {}
);
