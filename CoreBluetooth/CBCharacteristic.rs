//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreBluetooth::*;
use crate::Foundation::*;

ns_options!(
    #[underlying(NSUInteger)]
    pub enum CBCharacteristicProperties {
        CBCharacteristicPropertyBroadcast = 0x01,
        CBCharacteristicPropertyRead = 0x02,
        CBCharacteristicPropertyWriteWithoutResponse = 0x04,
        CBCharacteristicPropertyWrite = 0x08,
        CBCharacteristicPropertyNotify = 0x10,
        CBCharacteristicPropertyIndicate = 0x20,
        CBCharacteristicPropertyAuthenticatedSignedWrites = 0x40,
        CBCharacteristicPropertyExtendedProperties = 0x80,
        CBCharacteristicPropertyNotifyEncryptionRequired = 0x100,
        CBCharacteristicPropertyIndicateEncryptionRequired = 0x200,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CoreBluetooth_CBCharacteristic")]
    pub struct CBCharacteristic;

    #[cfg(feature = "CoreBluetooth_CBCharacteristic")]
    unsafe impl ClassType for CBCharacteristic {
        #[inherits(NSObject)]
        type Super = CBAttribute;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "CoreBluetooth_CBCharacteristic")]
unsafe impl NSObjectProtocol for CBCharacteristic {}

extern_methods!(
    #[cfg(feature = "CoreBluetooth_CBCharacteristic")]
    unsafe impl CBCharacteristic {
        #[cfg(feature = "CoreBluetooth_CBService")]
        #[method_id(@__retain_semantics Other service)]
        pub unsafe fn service(&self) -> Option<Id<CBService>>;

        #[method(properties)]
        pub unsafe fn properties(&self) -> CBCharacteristicProperties;

        #[cfg(feature = "Foundation_NSData")]
        #[method_id(@__retain_semantics Other value)]
        pub unsafe fn value(&self) -> Option<Id<NSData>>;

        #[cfg(all(feature = "CoreBluetooth_CBDescriptor", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other descriptors)]
        pub unsafe fn descriptors(&self) -> Option<Id<NSArray<CBDescriptor>>>;

        #[deprecated]
        #[method(isBroadcasted)]
        pub unsafe fn isBroadcasted(&self) -> bool;

        #[method(isNotifying)]
        pub unsafe fn isNotifying(&self) -> bool;
    }
);

extern_methods!(
    /// Methods declared on superclass `CBAttribute`
    #[cfg(feature = "CoreBluetooth_CBCharacteristic")]
    unsafe impl CBCharacteristic {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "CoreBluetooth_CBCharacteristic")]
    unsafe impl CBCharacteristic {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum CBAttributePermissions {
        CBAttributePermissionsReadable = 0x01,
        CBAttributePermissionsWriteable = 0x02,
        CBAttributePermissionsReadEncryptionRequired = 0x04,
        CBAttributePermissionsWriteEncryptionRequired = 0x08,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CoreBluetooth_CBMutableCharacteristic")]
    pub struct CBMutableCharacteristic;

    #[cfg(feature = "CoreBluetooth_CBMutableCharacteristic")]
    unsafe impl ClassType for CBMutableCharacteristic {
        #[inherits(CBAttribute, NSObject)]
        type Super = CBCharacteristic;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "CoreBluetooth_CBMutableCharacteristic")]
unsafe impl NSObjectProtocol for CBMutableCharacteristic {}

extern_methods!(
    #[cfg(feature = "CoreBluetooth_CBMutableCharacteristic")]
    unsafe impl CBMutableCharacteristic {
        #[method(permissions)]
        pub unsafe fn permissions(&self) -> CBAttributePermissions;

        #[method(setPermissions:)]
        pub unsafe fn setPermissions(&self, permissions: CBAttributePermissions);

        #[cfg(all(feature = "CoreBluetooth_CBCentral", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other subscribedCentrals)]
        pub unsafe fn subscribedCentrals(&self) -> Option<Id<NSArray<CBCentral>>>;

        #[method(properties)]
        pub unsafe fn properties(&self) -> CBCharacteristicProperties;

        #[method(setProperties:)]
        pub unsafe fn setProperties(&self, properties: CBCharacteristicProperties);

        #[cfg(feature = "Foundation_NSData")]
        #[method_id(@__retain_semantics Other value)]
        pub unsafe fn value(&self) -> Option<Id<NSData>>;

        #[cfg(feature = "Foundation_NSData")]
        #[method(setValue:)]
        pub unsafe fn setValue(&self, value: Option<&NSData>);

        #[cfg(all(feature = "CoreBluetooth_CBDescriptor", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other descriptors)]
        pub unsafe fn descriptors(&self) -> Option<Id<NSArray<CBDescriptor>>>;

        #[cfg(all(feature = "CoreBluetooth_CBDescriptor", feature = "Foundation_NSArray"))]
        #[method(setDescriptors:)]
        pub unsafe fn setDescriptors(&self, descriptors: Option<&NSArray<CBDescriptor>>);

        #[cfg(all(feature = "CoreBluetooth_CBUUID", feature = "Foundation_NSData"))]
        #[method_id(@__retain_semantics Init initWithType:properties:value:permissions:)]
        pub unsafe fn initWithType_properties_value_permissions(
            this: Allocated<Self>,
            uuid: &CBUUID,
            properties: CBCharacteristicProperties,
            value: Option<&NSData>,
            permissions: CBAttributePermissions,
        ) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `CBAttribute`
    #[cfg(feature = "CoreBluetooth_CBMutableCharacteristic")]
    unsafe impl CBMutableCharacteristic {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "CoreBluetooth_CBMutableCharacteristic")]
    unsafe impl CBMutableCharacteristic {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);
