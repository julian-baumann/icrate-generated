//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreBluetooth::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSInteger)]
    #[deprecated = "Use CBManagerAuthorization instead"]
    pub enum CBPeripheralManagerAuthorizationStatus {
        #[deprecated = "Use CBManagerAuthorization instead"]
        CBPeripheralManagerAuthorizationStatusNotDetermined = 0,
        #[deprecated = "Use CBManagerAuthorization instead"]
        CBPeripheralManagerAuthorizationStatusRestricted = 1,
        #[deprecated = "Use CBManagerAuthorization instead"]
        CBPeripheralManagerAuthorizationStatusDenied = 2,
        #[deprecated = "Use CBManagerAuthorization instead"]
        CBPeripheralManagerAuthorizationStatusAuthorized = 3,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    #[deprecated = "Use CBManagerState instead"]
    pub enum CBPeripheralManagerState {
        #[deprecated = "Use CBManagerState instead"]
        CBPeripheralManagerStateUnknown = CBManagerStateUnknown,
        #[deprecated = "Use CBManagerState instead"]
        CBPeripheralManagerStateResetting = CBManagerStateResetting,
        #[deprecated = "Use CBManagerState instead"]
        CBPeripheralManagerStateUnsupported = CBManagerStateUnsupported,
        #[deprecated = "Use CBManagerState instead"]
        CBPeripheralManagerStateUnauthorized = CBManagerStateUnauthorized,
        #[deprecated = "Use CBManagerState instead"]
        CBPeripheralManagerStatePoweredOff = CBManagerStatePoweredOff,
        #[deprecated = "Use CBManagerState instead"]
        CBPeripheralManagerStatePoweredOn = CBManagerStatePoweredOn,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum CBPeripheralManagerConnectionLatency {
        CBPeripheralManagerConnectionLatencyLow = 0,
        CBPeripheralManagerConnectionLatencyMedium = 1,
        CBPeripheralManagerConnectionLatencyHigh = 2,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CoreBluetooth_CBPeripheralManager")]
    pub struct CBPeripheralManager;

    #[cfg(feature = "CoreBluetooth_CBPeripheralManager")]
    unsafe impl ClassType for CBPeripheralManager {
        #[inherits(NSObject)]
        type Super = CBManager;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "CoreBluetooth_CBPeripheralManager")]
unsafe impl NSObjectProtocol for CBPeripheralManager {}

extern_methods!(
    #[cfg(feature = "CoreBluetooth_CBPeripheralManager")]
    unsafe impl CBPeripheralManager {
        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Id<ProtocolObject<dyn CBPeripheralManagerDelegate>>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn CBPeripheralManagerDelegate>>,
        );

        #[method(isAdvertising)]
        pub unsafe fn isAdvertising(&self) -> bool;

        #[deprecated = "Use CBManagerAuthorization instead"]
        #[method(authorizationStatus)]
        pub unsafe fn authorizationStatus() -> CBPeripheralManagerAuthorizationStatus;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithDelegate:queue:)]
        pub unsafe fn initWithDelegate_queue(
            this: Allocated<Self>,
            delegate: Option<&ProtocolObject<dyn CBPeripheralManagerDelegate>>,
            queue: Option<&dispatch_queue_t>,
        ) -> Id<Self>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Init initWithDelegate:queue:options:)]
        pub unsafe fn initWithDelegate_queue_options(
            this: Allocated<Self>,
            delegate: Option<&ProtocolObject<dyn CBPeripheralManagerDelegate>>,
            queue: Option<&dispatch_queue_t>,
            options: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Id<Self>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method(startAdvertising:)]
        pub unsafe fn startAdvertising(
            &self,
            advertisement_data: Option<&NSDictionary<NSString, AnyObject>>,
        );

        #[method(stopAdvertising)]
        pub unsafe fn stopAdvertising(&self);

        #[cfg(feature = "CoreBluetooth_CBCentral")]
        #[method(setDesiredConnectionLatency:forCentral:)]
        pub unsafe fn setDesiredConnectionLatency_forCentral(
            &self,
            latency: CBPeripheralManagerConnectionLatency,
            central: &CBCentral,
        );

        #[cfg(feature = "CoreBluetooth_CBMutableService")]
        #[method(addService:)]
        pub unsafe fn addService(&self, service: &CBMutableService);

        #[cfg(feature = "CoreBluetooth_CBMutableService")]
        #[method(removeService:)]
        pub unsafe fn removeService(&self, service: &CBMutableService);

        #[method(removeAllServices)]
        pub unsafe fn removeAllServices(&self);

        #[cfg(feature = "CoreBluetooth_CBATTRequest")]
        #[method(respondToRequest:withResult:)]
        pub unsafe fn respondToRequest_withResult(
            &self,
            request: &CBATTRequest,
            result: CBATTError,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBCentral",
            feature = "CoreBluetooth_CBMutableCharacteristic",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSData"
        ))]
        #[method(updateValue:forCharacteristic:onSubscribedCentrals:)]
        pub unsafe fn updateValue_forCharacteristic_onSubscribedCentrals(
            &self,
            value: &NSData,
            characteristic: &CBMutableCharacteristic,
            centrals: Option<&NSArray<CBCentral>>,
        ) -> bool;

        #[method(publishL2CAPChannelWithEncryption:)]
        pub unsafe fn publishL2CAPChannelWithEncryption(&self, encryption_required: bool);

        #[method(unpublishL2CAPChannel:)]
        pub unsafe fn unpublishL2CAPChannel(&self, psm: CBL2CAPPSM);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "CoreBluetooth_CBPeripheralManager")]
    unsafe impl CBPeripheralManager {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);

extern_protocol!(
    pub unsafe trait CBPeripheralManagerDelegate: NSObjectProtocol {
        #[cfg(feature = "CoreBluetooth_CBPeripheralManager")]
        #[method(peripheralManagerDidUpdateState:)]
        unsafe fn peripheralManagerDidUpdateState(&self, peripheral: &CBPeripheralManager);

        #[cfg(all(
            feature = "CoreBluetooth_CBPeripheralManager",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[optional]
        #[method(peripheralManager:willRestoreState:)]
        unsafe fn peripheralManager_willRestoreState(
            &self,
            peripheral: &CBPeripheralManager,
            dict: &NSDictionary<NSString, AnyObject>,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBPeripheralManager",
            feature = "Foundation_NSError"
        ))]
        #[optional]
        #[method(peripheralManagerDidStartAdvertising:error:)]
        unsafe fn peripheralManagerDidStartAdvertising_error(
            &self,
            peripheral: &CBPeripheralManager,
            error: Option<&NSError>,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBPeripheralManager",
            feature = "CoreBluetooth_CBService",
            feature = "Foundation_NSError"
        ))]
        #[optional]
        #[method(peripheralManager:didAddService:error:)]
        unsafe fn peripheralManager_didAddService_error(
            &self,
            peripheral: &CBPeripheralManager,
            service: &CBService,
            error: Option<&NSError>,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBCentral",
            feature = "CoreBluetooth_CBCharacteristic",
            feature = "CoreBluetooth_CBPeripheralManager"
        ))]
        #[optional]
        #[method(peripheralManager:central:didSubscribeToCharacteristic:)]
        unsafe fn peripheralManager_central_didSubscribeToCharacteristic(
            &self,
            peripheral: &CBPeripheralManager,
            central: &CBCentral,
            characteristic: &CBCharacteristic,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBCentral",
            feature = "CoreBluetooth_CBCharacteristic",
            feature = "CoreBluetooth_CBPeripheralManager"
        ))]
        #[optional]
        #[method(peripheralManager:central:didUnsubscribeFromCharacteristic:)]
        unsafe fn peripheralManager_central_didUnsubscribeFromCharacteristic(
            &self,
            peripheral: &CBPeripheralManager,
            central: &CBCentral,
            characteristic: &CBCharacteristic,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBATTRequest",
            feature = "CoreBluetooth_CBPeripheralManager"
        ))]
        #[optional]
        #[method(peripheralManager:didReceiveReadRequest:)]
        unsafe fn peripheralManager_didReceiveReadRequest(
            &self,
            peripheral: &CBPeripheralManager,
            request: &CBATTRequest,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBATTRequest",
            feature = "CoreBluetooth_CBPeripheralManager",
            feature = "Foundation_NSArray"
        ))]
        #[optional]
        #[method(peripheralManager:didReceiveWriteRequests:)]
        unsafe fn peripheralManager_didReceiveWriteRequests(
            &self,
            peripheral: &CBPeripheralManager,
            requests: &NSArray<CBATTRequest>,
        );

        #[cfg(feature = "CoreBluetooth_CBPeripheralManager")]
        #[optional]
        #[method(peripheralManagerIsReadyToUpdateSubscribers:)]
        unsafe fn peripheralManagerIsReadyToUpdateSubscribers(
            &self,
            peripheral: &CBPeripheralManager,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBPeripheralManager",
            feature = "Foundation_NSError"
        ))]
        #[optional]
        #[method(peripheralManager:didPublishL2CAPChannel:error:)]
        unsafe fn peripheralManager_didPublishL2CAPChannel_error(
            &self,
            peripheral: &CBPeripheralManager,
            psm: CBL2CAPPSM,
            error: Option<&NSError>,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBPeripheralManager",
            feature = "Foundation_NSError"
        ))]
        #[optional]
        #[method(peripheralManager:didUnpublishL2CAPChannel:error:)]
        unsafe fn peripheralManager_didUnpublishL2CAPChannel_error(
            &self,
            peripheral: &CBPeripheralManager,
            psm: CBL2CAPPSM,
            error: Option<&NSError>,
        );

        #[cfg(all(
            feature = "CoreBluetooth_CBL2CAPChannel",
            feature = "CoreBluetooth_CBPeripheralManager",
            feature = "Foundation_NSError"
        ))]
        #[optional]
        #[method(peripheralManager:didOpenL2CAPChannel:error:)]
        unsafe fn peripheralManager_didOpenL2CAPChannel_error(
            &self,
            peripheral: &CBPeripheralManager,
            channel: Option<&CBL2CAPChannel>,
            error: Option<&NSError>,
        );
    }

    unsafe impl ProtocolType for dyn CBPeripheralManagerDelegate {}
);
