// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

//! # Bindings to the `CoreBluetooth` framework

#[cfg_attr(feature = "apple", link(name = "CoreBluetooth", kind = "framework"))]
extern "C" {}

#[path = "CBATTRequest.rs"]
mod __CBATTRequest;
#[path = "CBAdvertisementData.rs"]
mod __CBAdvertisementData;
#[path = "CBAttribute.rs"]
mod __CBAttribute;
#[path = "CBCentral.rs"]
mod __CBCentral;
#[path = "CBCentralManager.rs"]
mod __CBCentralManager;
#[path = "CBCentralManagerConstants.rs"]
mod __CBCentralManagerConstants;
#[path = "CBCharacteristic.rs"]
mod __CBCharacteristic;
#[path = "CBDefines.rs"]
mod __CBDefines;
#[path = "CBDescriptor.rs"]
mod __CBDescriptor;
#[path = "CBError.rs"]
mod __CBError;
#[path = "CBL2CAPChannel.rs"]
mod __CBL2CAPChannel;
#[path = "CBManager.rs"]
mod __CBManager;
#[path = "CBPeer.rs"]
mod __CBPeer;
#[path = "CBPeripheral.rs"]
mod __CBPeripheral;
#[path = "CBPeripheralManager.rs"]
mod __CBPeripheralManager;
#[path = "CBPeripheralManagerConstants.rs"]
mod __CBPeripheralManagerConstants;
#[path = "CBService.rs"]
mod __CBService;
#[path = "CBUUID.rs"]
mod __CBUUID;

#[cfg(feature = "CoreBluetooth_CBATTRequest")]
pub use self::__CBATTRequest::CBATTRequest;
pub use self::__CBAdvertisementData::CBAdvertisementDataIsConnectable;
pub use self::__CBAdvertisementData::CBAdvertisementDataLocalNameKey;
pub use self::__CBAdvertisementData::CBAdvertisementDataManufacturerDataKey;
pub use self::__CBAdvertisementData::CBAdvertisementDataOverflowServiceUUIDsKey;
pub use self::__CBAdvertisementData::CBAdvertisementDataServiceDataKey;
pub use self::__CBAdvertisementData::CBAdvertisementDataServiceUUIDsKey;
pub use self::__CBAdvertisementData::CBAdvertisementDataSolicitedServiceUUIDsKey;
pub use self::__CBAdvertisementData::CBAdvertisementDataTxPowerLevelKey;
#[cfg(feature = "CoreBluetooth_CBAttribute")]
pub use self::__CBAttribute::CBAttribute;
#[cfg(feature = "CoreBluetooth_CBCentral")]
pub use self::__CBCentral::CBCentral;
#[cfg(feature = "CoreBluetooth_CBCentralManager")]
pub use self::__CBCentralManager::CBCentralManager;
pub use self::__CBCentralManager::CBCentralManagerDelegate;
pub use self::__CBCentralManager::CBCentralManagerFeature;
pub use self::__CBCentralManager::CBCentralManagerFeatureExtendedScanAndConnect;
pub use self::__CBCentralManager::CBCentralManagerState;
pub use self::__CBCentralManager::CBConnectionEvent;
pub use self::__CBCentralManager::{
    CBCentralManagerStatePoweredOff, CBCentralManagerStatePoweredOn,
    CBCentralManagerStateResetting, CBCentralManagerStateUnauthorized,
    CBCentralManagerStateUnknown, CBCentralManagerStateUnsupported,
};
pub use self::__CBCentralManager::{
    CBConnectionEventPeerConnected, CBConnectionEventPeerDisconnected,
};
pub use self::__CBCentralManagerConstants::CBCentralManagerOptionDeviceAccessForMedia;
pub use self::__CBCentralManagerConstants::CBCentralManagerOptionRestoreIdentifierKey;
pub use self::__CBCentralManagerConstants::CBCentralManagerOptionShowPowerAlertKey;
pub use self::__CBCentralManagerConstants::CBCentralManagerRestoredStatePeripheralsKey;
pub use self::__CBCentralManagerConstants::CBCentralManagerRestoredStateScanOptionsKey;
pub use self::__CBCentralManagerConstants::CBCentralManagerRestoredStateScanServicesKey;
pub use self::__CBCentralManagerConstants::CBCentralManagerScanOptionAllowDuplicatesKey;
pub use self::__CBCentralManagerConstants::CBCentralManagerScanOptionSolicitedServiceUUIDsKey;
pub use self::__CBCentralManagerConstants::CBConnectPeripheralOptionEnableAutoReconnect;
pub use self::__CBCentralManagerConstants::CBConnectPeripheralOptionEnableTransportBridgingKey;
pub use self::__CBCentralManagerConstants::CBConnectPeripheralOptionNotifyOnConnectionKey;
pub use self::__CBCentralManagerConstants::CBConnectPeripheralOptionNotifyOnDisconnectionKey;
pub use self::__CBCentralManagerConstants::CBConnectPeripheralOptionNotifyOnNotificationKey;
pub use self::__CBCentralManagerConstants::CBConnectPeripheralOptionRequiresANCS;
pub use self::__CBCentralManagerConstants::CBConnectPeripheralOptionStartDelayKey;
pub use self::__CBCentralManagerConstants::CBConnectionEventMatchingOption;
pub use self::__CBCentralManagerConstants::CBConnectionEventMatchingOptionPeripheralUUIDs;
pub use self::__CBCentralManagerConstants::CBConnectionEventMatchingOptionServiceUUIDs;
pub use self::__CBCharacteristic::CBAttributePermissions;
#[cfg(feature = "CoreBluetooth_CBCharacteristic")]
pub use self::__CBCharacteristic::CBCharacteristic;
pub use self::__CBCharacteristic::CBCharacteristicProperties;
#[cfg(feature = "CoreBluetooth_CBMutableCharacteristic")]
pub use self::__CBCharacteristic::CBMutableCharacteristic;
pub use self::__CBCharacteristic::{
    CBAttributePermissionsReadEncryptionRequired, CBAttributePermissionsReadable,
    CBAttributePermissionsWriteEncryptionRequired, CBAttributePermissionsWriteable,
};
pub use self::__CBCharacteristic::{
    CBCharacteristicPropertyAuthenticatedSignedWrites, CBCharacteristicPropertyBroadcast,
    CBCharacteristicPropertyExtendedProperties, CBCharacteristicPropertyIndicate,
    CBCharacteristicPropertyIndicateEncryptionRequired, CBCharacteristicPropertyNotify,
    CBCharacteristicPropertyNotifyEncryptionRequired, CBCharacteristicPropertyRead,
    CBCharacteristicPropertyWrite, CBCharacteristicPropertyWriteWithoutResponse,
};
#[cfg(feature = "CoreBluetooth_CBDescriptor")]
pub use self::__CBDescriptor::CBDescriptor;
#[cfg(feature = "CoreBluetooth_CBMutableDescriptor")]
pub use self::__CBDescriptor::CBMutableDescriptor;
pub use self::__CBError::CBATTError;
pub use self::__CBError::CBATTErrorDomain;
pub use self::__CBError::CBError;
pub use self::__CBError::CBErrorDomain;
pub use self::__CBError::{
    CBATTErrorAttributeNotFound, CBATTErrorAttributeNotLong, CBATTErrorInsufficientAuthentication,
    CBATTErrorInsufficientAuthorization, CBATTErrorInsufficientEncryption,
    CBATTErrorInsufficientEncryptionKeySize, CBATTErrorInsufficientResources,
    CBATTErrorInvalidAttributeValueLength, CBATTErrorInvalidHandle, CBATTErrorInvalidOffset,
    CBATTErrorInvalidPdu, CBATTErrorPrepareQueueFull, CBATTErrorReadNotPermitted,
    CBATTErrorRequestNotSupported, CBATTErrorSuccess, CBATTErrorUnlikelyError,
    CBATTErrorUnsupportedGroupType, CBATTErrorWriteNotPermitted,
};
pub use self::__CBError::{
    CBErrorAlreadyAdvertising, CBErrorConnectionFailed, CBErrorConnectionLimitReached,
    CBErrorConnectionTimeout, CBErrorEncryptionTimedOut, CBErrorInvalidHandle,
    CBErrorInvalidParameters, CBErrorLeGattExceededBackgroundNotificationLimit,
    CBErrorLeGattNearBackgroundNotificationLimit, CBErrorNotConnected, CBErrorOperationCancelled,
    CBErrorOperationNotSupported, CBErrorOutOfSpace, CBErrorPeerRemovedPairingInformation,
    CBErrorPeripheralDisconnected, CBErrorTooManyLEPairedDevices, CBErrorUUIDNotAllowed,
    CBErrorUnknown, CBErrorUnknownDevice, CBErrorUnkownDevice,
};
#[cfg(feature = "CoreBluetooth_CBL2CAPChannel")]
pub use self::__CBL2CAPChannel::CBL2CAPChannel;
pub use self::__CBL2CAPChannel::CBL2CAPPSM;
#[cfg(feature = "CoreBluetooth_CBManager")]
pub use self::__CBManager::CBManager;
pub use self::__CBManager::CBManagerAuthorization;
pub use self::__CBManager::CBManagerState;
pub use self::__CBManager::{
    CBManagerAuthorizationAllowedAlways, CBManagerAuthorizationDenied,
    CBManagerAuthorizationNotDetermined, CBManagerAuthorizationRestricted,
};
pub use self::__CBManager::{
    CBManagerStatePoweredOff, CBManagerStatePoweredOn, CBManagerStateResetting,
    CBManagerStateUnauthorized, CBManagerStateUnknown, CBManagerStateUnsupported,
};
#[cfg(feature = "CoreBluetooth_CBPeer")]
pub use self::__CBPeer::CBPeer;
pub use self::__CBPeripheral::CBCharacteristicWriteType;
#[cfg(feature = "CoreBluetooth_CBPeripheral")]
pub use self::__CBPeripheral::CBPeripheral;
pub use self::__CBPeripheral::CBPeripheralDelegate;
pub use self::__CBPeripheral::CBPeripheralState;
pub use self::__CBPeripheral::{
    CBCharacteristicWriteWithResponse, CBCharacteristicWriteWithoutResponse,
};
pub use self::__CBPeripheral::{
    CBPeripheralStateConnected, CBPeripheralStateConnecting, CBPeripheralStateDisconnected,
    CBPeripheralStateDisconnecting,
};
#[cfg(feature = "CoreBluetooth_CBPeripheralManager")]
pub use self::__CBPeripheralManager::CBPeripheralManager;
pub use self::__CBPeripheralManager::CBPeripheralManagerAuthorizationStatus;
pub use self::__CBPeripheralManager::CBPeripheralManagerConnectionLatency;
pub use self::__CBPeripheralManager::CBPeripheralManagerDelegate;
pub use self::__CBPeripheralManager::CBPeripheralManagerState;
pub use self::__CBPeripheralManager::{
    CBPeripheralManagerAuthorizationStatusAuthorized, CBPeripheralManagerAuthorizationStatusDenied,
    CBPeripheralManagerAuthorizationStatusNotDetermined,
    CBPeripheralManagerAuthorizationStatusRestricted,
};
pub use self::__CBPeripheralManager::{
    CBPeripheralManagerConnectionLatencyHigh, CBPeripheralManagerConnectionLatencyLow,
    CBPeripheralManagerConnectionLatencyMedium,
};
pub use self::__CBPeripheralManager::{
    CBPeripheralManagerStatePoweredOff, CBPeripheralManagerStatePoweredOn,
    CBPeripheralManagerStateResetting, CBPeripheralManagerStateUnauthorized,
    CBPeripheralManagerStateUnknown, CBPeripheralManagerStateUnsupported,
};
pub use self::__CBPeripheralManagerConstants::CBPeripheralManagerOptionRestoreIdentifierKey;
pub use self::__CBPeripheralManagerConstants::CBPeripheralManagerOptionShowPowerAlertKey;
pub use self::__CBPeripheralManagerConstants::CBPeripheralManagerRestoredStateAdvertisementDataKey;
pub use self::__CBPeripheralManagerConstants::CBPeripheralManagerRestoredStateServicesKey;
#[cfg(feature = "CoreBluetooth_CBMutableService")]
pub use self::__CBService::CBMutableService;
#[cfg(feature = "CoreBluetooth_CBService")]
pub use self::__CBService::CBService;
pub use self::__CBUUID::CBUUIDCharacteristicAggregateFormatString;
pub use self::__CBUUID::CBUUIDCharacteristicExtendedPropertiesString;
pub use self::__CBUUID::CBUUIDCharacteristicFormatString;
pub use self::__CBUUID::CBUUIDCharacteristicUserDescriptionString;
pub use self::__CBUUID::CBUUIDCharacteristicValidRangeString;
pub use self::__CBUUID::CBUUIDClientCharacteristicConfigurationString;
pub use self::__CBUUID::CBUUIDL2CAPPSMCharacteristicString;
pub use self::__CBUUID::CBUUIDServerCharacteristicConfigurationString;
#[cfg(feature = "CoreBluetooth_CBUUID")]
pub use self::__CBUUID::CBUUID;
